-"""Naive_Bayes_Women_Clothes_Review.ipynb
    Do not edit this file, for using this make a copy in your device
"""

import pandas as pd
import numpy as np

df = pd.read_csv('/content/Womens Clothing E-Commerce Reviews.csv')

df.head()

df.info()

df.describe()

df.shape

df.isna().sum()

df[df['Review Text'].notna()]

df['Review Text'].fillna('No Review', inplace=True)

df.isna().sum()

df['Review Text']

df.columns

x = df['Review Text']
y = df['Rating']

df['Rating'].value_counts()

# Train Test split
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.8, test_size=0.2, stratify=y, random_state = 33)

x_train.shape, x_test.shape

y_train.shape, y_test.shape

# Feature Text Conversion to Tokens
from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer(lowercase=True, analyzer='word', ngram_range=(1,2), stop_words='english',max_features=100)

x_train = cv.fit_transform(x_train)

cv.get_feature_names_out()

x_train.toarray()

# print(x_train)

x_test = cv.transform(x_test)

cv.get_feature_names_out()

x_test.toarray()

# print(x_test)

"""**Model Trainning using Naivv Bayes**"""

from sklearn.naive_bayes import MultinomialNB

model = MultinomialNB()

model.fit(x_train, y_train)

"""**Get Model Prediction**"""

y_pred = model.predict(x_test)

y_pred.shape

y_pred

"""**Get Probability of Each Predicted Class**"""

model.predict_proba(x_test)

"""Model Evalution"""

from sklearn.metrics import confusion_matrix, classification_report

print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test, y_pred))

"""**Recategories Rating into 0 and 1**"""

df['Rating'].value_counts()

# 1, 2, 3 as 0 and 4, 5 as 1
df.replace({'Rating': {1:0, 2:0, 3:0, 4:1, 5:1}}, inplace=True)

y = df['Rating']

x = df['Review Text']

"""**Train Test Split**"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.8, test_size=0.2, stratify=y, random_state = 33)

x_train.shape, x_test.shape

y_train.shape, y_test.shape

"""**Get Feature Text Conversion to Tokens**"""

# Feature Text Conversion to Tokens
from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer(lowercase=True, analyzer='word', ngram_range=(1,2), stop_words='english',max_features=5000)

x_train = cv.fit_transform(x_train)

x_test = cv.transform(x_test)

"""**Get Model Re-Train**"""

from sklearn.naive_bayes import MultinomialNB

model = MultinomialNB()

model.fit(x_train, y_train)

"""**Model Prediction**"""

y_pred = model.predict(x_test)

y_pred.shape

y_pred

from sklearn.metrics import confusion_matrix, classification_report

print(confusion_matrix(y_test,y_pred))

print(classification_report(y_test, y_pred))

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test, y_pred)
print(accuracy)

from sklearn.metrics import roc_auc_score # Import the roc_auc_score function

y_prob = model.predict_proba(x_test)

# Calculating AUC
auc_score = roc_auc_score(y_test, y_prob[:, 1])
print(f'AUC Score: {auc_score}')

import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, roc_auc_score # Import roc_auc_score

# Assuming 'model', 'x_test', and 'y_test' are defined from previous cells
y_prob = model.predict_proba(x_test)

# Calculate ROC curve
fpr, tpr, thresholds = roc_curve(y_test, y_prob[:, 1]) # Calculate fpr and tpr

# Calculate AUC
roc_auc = roc_auc_score(y_test, y_prob[:, 1])

plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()

plt.savefig('roc_curve.png')
plt.close()

